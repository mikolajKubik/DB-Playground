#######
#
# !!! IMPORTANT !!!
# MONGODB CLUSTER IS READY TO USE RIGHT AROUND 1 MINUTE AFTER START OF THE LAST NODE
# LOCALHOST ENTRIES FOR WINDOWS ARE REQUIRED
#     ADD TO HOSTS FILE: C:\Windows\System32\drivers\etc\hosts
#     127.0.0.1 mongo1
#     127.0.0.1 mongo2
#     127.0.0.1 mongo3
#
# mongosh 127.0.0.1:PORT -u root -p root --authenticationDatabase admin
# rs.status()
#
# docker compose -f docker-compose-windows.yml up -d
# docker compose -f docker-compose-windows.yml down -v
networks:
  mongo-network:
    driver: bridge
  kafkanet:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16

volumes:
  mongo1-data:
  mongo2-data:
  mongo3-data:
  mongo-rs-key:
  kafka1_data:
    driver: local
  kafka2_data:
    driver: local
  kafka3_data:
    driver: local

services:
  mongo1:
    image: mongo:8.0.1
    container_name: mongo_1
    hostname: mongo1
    ports:
      - 27017:27017
    networks:
      - mongo-network
    volumes:
      - mongo1-data:/data/db
      - mongo-rs-key:/etc/mongodb/pki
    command: >
      bash -c '
      [ ! -f /etc/mongodb/pki/rs_keyfile ] &&
      (openssl rand -base64 756 > /etc/mongodb/pki/rs_keyfile && chmod 400 /etc/mongodb/pki/rs_keyfile);
      mongod --port 27017 --replSet rs0 --bind_ip_all --auth --keyFile /etc/mongodb/pki/rs_keyfile
      '
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 2s
      retries: 5

  mongo2:
    image: mongo:8.0.1
    container_name: mongo_2
    hostname: mongo2
    ports:
      - 27018:27018
    networks:
      - mongo-network
    volumes:
      - mongo2-data:/data/db
      - mongo-rs-key:/etc/mongodb/pki
    command: >
      bash -c '
      mongod --port 27018 --replSet rs0 --bind_ip_all --auth --keyFile /etc/mongodb/pki/rs_keyfile'
    restart: unless-stopped
    depends_on:
      mongo1:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "127.0.0.1:27018",
          "--eval",
          "db.adminCommand('ping')",
        ]
      interval: 10s
      timeout: 2s
      retries: 5

  mongo3:
    image: mongo:8.0.1
    container_name: mongo_3
    hostname: mongo3
    ports:
      - 27019:27019
    networks:
      - mongo-network
    volumes:
      - mongo3-data:/data/db
      - mongo-rs-key:/etc/mongodb/pki
    command: >
      bash -c '
      (
        sleep 20;
        mongosh 127.0.0.1:27019 --eval "
        rs.initiate({
          _id: \"rs0\",
          version: 1,
          members: [
            { _id: 0, host: \"mongo1:27017\" },
            { _id: 1, host: \"mongo2:27018\" },
            { _id: 2, host: \"mongo3:27019\" }
          ]
        });
        ";
        sleep 20;
        mongosh 127.0.0.1:27019 --eval "db.getSiblingDB(\"admin\").createUser({ user: \"root\", pwd: \"root\", roles: [ { role: \"root\", db: \"admin\" } ] })";
      ) &
      exec mongod --port 27019 --replSet rs0 --bind_ip_all --auth --keyFile /etc/mongodb/pki/rs_keyfile
      '
    restart: unless-stopped
    depends_on:
      mongo2:
        condition: service_healthy
      mongo1:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "127.0.0.1:27019",
          "--eval",
          "db.adminCommand('ping')",
        ]
      interval: 10s
      timeout: 2s
      retries: 5

  mongo-express:
    image: mongo-express
    container_name: mongo_express
    ports:
      - 8080:8081
    networks:
      - mongo-network

    depends_on:
      mongo3:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo1:
        condition: service_healthy
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
      ME_CONFIG_BASICAUTH_USERNAME: root
      ME_CONFIG_BASICAUTH_PASSWORD: root
      ME_CONFIG_MONGODB_URL: mongodb://root:root@mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0&authSource=admin

    restart: unless-stopped

  kafka1:
    image: docker.io/bitnami/kafka:3.6
    hostname: kafka1
    container_name: kafka1
    ports:
      - target: 9192
        published: 9192
        protocol: tcp
      - target: 9193
        published: 9193
        protocol: tcp
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_BROKER_RACK=RACK1
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=CONTROLLER://:9193,DOCKER_EXTERNAL://kafka1:9192,DOCKER_INTERNAL://kafka1:19192
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT,DOCKER_INTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=DOCKER_INTERNAL
      - KAFKA_CFG_ADVERTISED_LISTENERS=DOCKER_EXTERNAL://kafka1:9192,DOCKER_INTERNAL://kafka1:19192
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9193,2@kafka2:9293,3@kafka3:9393
      - KAFKA_KRAFT_CLUSTER_ID=NTg2OWZhNzY3NDhjMTFlZG
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_OPTS=-Dlog4j.rootLogger=DEBUG
    volumes:
      - kafka1_data:/bitnami/kafka
    networks:
      kafkanet:
        ipv4_address: 172.25.0.10

  kafka2:
    image: docker.io/bitnami/kafka:3.6
    hostname: kafka2
    container_name: kafka2
    ports:
      - target: 9292
        published: 9292
        protocol: tcp
      - target: 9293
        published: 9293
        protocol: tcp
    environment:
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_BROKER_RACK=RACK1
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=CONTROLLER://:9293,DOCKER_EXTERNAL://kafka2:9292,DOCKER_INTERNAL://kafka2:19292
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT,DOCKER_INTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=DOCKER_INTERNAL
      - KAFKA_CFG_ADVERTISED_LISTENERS=DOCKER_EXTERNAL://kafka2:9292,DOCKER_INTERNAL://kafka2:19292
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9193,2@kafka2:9293,3@kafka3:9393
      - KAFKA_KRAFT_CLUSTER_ID=NTg2OWZhNzY3NDhjMTFlZG
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_OPTS=-Dlog4j.rootLogger=DEBUG
    volumes:
      - kafka2_data:/bitnami/kafka
    networks:
      kafkanet:
        ipv4_address: 172.25.0.20

  kafka3:
    image: docker.io/bitnami/kafka:3.6
    hostname: kafka3
    container_name: kafka3
    ports:
      - target: 9392
        published: 9392
        protocol: tcp
      - target: 9393
        published: 9393
        protocol: tcp
    environment:
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_CFG_BROKER_RACK=RACK1
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=CONTROLLER://:9393,DOCKER_EXTERNAL://kafka3:9392,DOCKER_INTERNAL://kafka3:19392
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT,DOCKER_INTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=DOCKER_INTERNAL
      - KAFKA_CFG_ADVERTISED_LISTENERS=DOCKER_EXTERNAL://kafka3:9392,DOCKER_INTERNAL://kafka3:19392
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9193,2@kafka2:9293,3@kafka3:9393
      - KAFKA_KRAFT_CLUSTER_ID=NTg2OWZhNzY3NDhjMTFlZG
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_OPTS=-Dlog4j.rootLogger=DEBUG
    volumes:
      - kafka3_data:/bitnami/kafka
    networks:
      kafkanet:
        ipv4_address: 172.25.0.30

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:7.8.0
  #   hostname: schema-registry
  #   container_name: schema-registry
  #   depends_on:
  #     - broker
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka1:19192,kafka2:19292,kafka3:19392'
  #     SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
